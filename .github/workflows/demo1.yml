name: My first workflow
on: push

permissions:
  id-token: write
  contents: read


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - name: Install lint tools
        run: |
          pip install ruff black
      - name: Run ruff (lint)
        run: ruff check .
      - name: Run Black (format check)
        id: blackcheck
        run: black --check .
      - name: Show Black diff
        if: failure() && steps.blackcheck.outcome == 'failure'
        run: black --diff --color .

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install more dependencies
        run: pip install -r requirements-dev.txt
      - name: Run pytest 
        run: pytest -q -vv -s
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install more dependencies
        run: pip install -r requirements-dev.txt
      - name: Build docker image
        run: docker image build -t securityscanservice .
      - name: Run container from image
        run: docker container run --name securityscan -d -p 8000:8000 securityscanservice
      - name: Smoke test (wait & ping / and POST /api/scan)
        run: |
          set -e
          # Espera a que / responda 200 (max 30s)
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ || echo 000)
            if [ "$code" = "200" ]; then 
              echo "UP"; 
              break; 
            fi
            sleep 1
            [ $i -eq 30 ] && echo "Service not ready" && docker logs securityscan && exit 1
          done
          
          #POST sencillo a /api/scan y comprobar 200
          
          echo "Haciendo POST /api/scanâ€¦"
          
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H 'Content-Type: application/json' \
            -d '{"scan_type":"url","target":"scanme.nmap.org"}' \
            http://localhost:8000/api/scan)
          
          echo "HTTP code: $code"
          
          [ "$code" = "200" ] || { echo "POST /api/scan failed ($code)"; docker logs securityscan; exit 1; }
      - name: Run pytest 
        run: pytest -q -vv -s
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920008214838:role/github-oidc-role
          aws-region: eu-west-3
      - name: Verify identity
        run: aws sts get-caller-identity
      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr
      - name: Build & push image
        run: |
          IMAGE=${{ steps.ecr.outputs.registry }}/securityscan/service:${{ github.sha }}
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
      - name: Stop container
        if: always()
        run: docker stop securityscan
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: deploying
        run: echo "deploying"